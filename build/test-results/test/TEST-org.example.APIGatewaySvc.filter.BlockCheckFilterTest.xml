<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="org.example.APIGatewaySvc.filter.BlockCheckFilterTest" tests="6" skipped="0" failures="6" errors="0" timestamp="2025-08-19T12:56:07.917Z" hostname="SEOKYEEUN" time="1.026">
  <properties/>
  <testcase name="shouldBlockRequestWhenAPIKeyIsBlocked()" classname="org.example.APIGatewaySvc.filter.BlockCheckFilterTest" time="0.881">
    <failure message="java.lang.AssertionError: expectation &quot;expectComplete&quot; failed (expected: onComplete(); actual: onError(java.lang.NullPointerException: Cannot invoke &quot;org.springframework.http.HttpHeaders.add(String, String)&quot; because the return value of &quot;org.springframework.http.server.reactive.ServerHttpResponse.getHeaders()&quot; is null))" type="java.lang.AssertionError">java.lang.AssertionError: expectation &quot;expectComplete&quot; failed (expected: onComplete(); actual: onError(java.lang.NullPointerException: Cannot invoke &quot;org.springframework.http.HttpHeaders.add(String, String)&quot; because the return value of &quot;org.springframework.http.server.reactive.ServerHttpResponse.getHeaders()&quot; is null))
	at reactor.test.MessageFormatter.assertionError(MessageFormatter.java:115)
	at reactor.test.MessageFormatter.failPrefix(MessageFormatter.java:104)
	at reactor.test.MessageFormatter.fail(MessageFormatter.java:73)
	at reactor.test.MessageFormatter.failOptional(MessageFormatter.java:88)
	at reactor.test.DefaultStepVerifierBuilder.lambda$expectComplete$4(DefaultStepVerifierBuilder.java:344)
	at reactor.test.DefaultStepVerifierBuilder$SignalEvent.test(DefaultStepVerifierBuilder.java:2289)
	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.onSignal(DefaultStepVerifierBuilder.java:1529)
	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.onExpectation(DefaultStepVerifierBuilder.java:1477)
	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.onError(DefaultStepVerifierBuilder.java:1129)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:136)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2571)
	at reactor.core.publisher.MonoZip$ZipInner.onSubscribe(MonoZip.java:470)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoZip$ZipCoordinator.request(MonoZip.java:220)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:129)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2573)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.onSubscribe(DefaultStepVerifierBuilder.java:1161)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2051)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.toVerifierAndSubscribe(DefaultStepVerifierBuilder.java:891)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:831)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:823)
	at reactor.test.DefaultStepVerifierBuilder.verifyComplete(DefaultStepVerifierBuilder.java:690)
	at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.shouldBlockRequestWhenAPIKeyIsBlocked(BlockCheckFilterTest.java:167)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	Suppressed: java.lang.NullPointerException: Cannot invoke &quot;org.springframework.http.HttpHeaders.add(String, String)&quot; because the return value of &quot;org.springframework.http.server.reactive.ServerHttpResponse.getHeaders()&quot; is null
		at org.example.APIGatewaySvc.filter.BlockCheckFilter.createBlockedResponse(BlockCheckFilter.java:157)
		at org.example.APIGatewaySvc.filter.BlockCheckFilter.lambda$filter$1(BlockCheckFilter.java:88)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		... 43 more
</failure>
  </testcase>
  <testcase name="shouldAllowRequestWhenNotBlocked()" classname="org.example.APIGatewaySvc.filter.BlockCheckFilterTest" time="0.071">
    <failure message="org.mockito.exceptions.misusing.UnnecessaryStubbingException: &#10;Unnecessary stubbings detected.&#10;Clean &amp; maintainable test code requires zero unnecessary code.&#10;Following stubbings are unnecessary (click to navigate to relevant line of code):&#10;  1. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.setUp(BlockCheckFilterTest.java:73)&#10;  2. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.setUp(BlockCheckFilterTest.java:75)&#10;  3. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.setUp(BlockCheckFilterTest.java:79)&#10;  4. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.setUp(BlockCheckFilterTest.java:80)&#10;  5. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.shouldAllowRequestWhenNotBlocked(BlockCheckFilterTest.java:93)&#10;Please remove unnecessary stubbings or use 'lenient' strictness. More info: javadoc for UnnecessaryStubbingException class." type="org.mockito.exceptions.misusing.UnnecessaryStubbingException">org.mockito.exceptions.misusing.UnnecessaryStubbingException: 
Unnecessary stubbings detected.
Clean &amp; maintainable test code requires zero unnecessary code.
Following stubbings are unnecessary (click to navigate to relevant line of code):
  1. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.setUp(BlockCheckFilterTest.java:73)
  2. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.setUp(BlockCheckFilterTest.java:75)
  3. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.setUp(BlockCheckFilterTest.java:79)
  4. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.setUp(BlockCheckFilterTest.java:80)
  5. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.shouldAllowRequestWhenNotBlocked(BlockCheckFilterTest.java:93)
Please remove unnecessary stubbings or use 'lenient' strictness. More info: javadoc for UnnecessaryStubbingException class.
	at app//org.mockito.junit.jupiter.MockitoExtension.afterEach(MockitoExtension.java:197)
	at java.base@17.0.13/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base@17.0.13/java.util.ArrayList.forEach(ArrayList.java:1511)
</failure>
  </testcase>
  <testcase name="shouldExtractIPFromXForwardedFor()" classname="org.example.APIGatewaySvc.filter.BlockCheckFilterTest" time="0.024">
    <failure message="org.mockito.exceptions.misusing.UnnecessaryStubbingException: &#10;Unnecessary stubbings detected.&#10;Clean &amp; maintainable test code requires zero unnecessary code.&#10;Following stubbings are unnecessary (click to navigate to relevant line of code):&#10;  1. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.setUp(BlockCheckFilterTest.java:73)&#10;  2. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.setUp(BlockCheckFilterTest.java:75)&#10;  3. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.setUp(BlockCheckFilterTest.java:77)&#10;  4. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.setUp(BlockCheckFilterTest.java:79)&#10;  5. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.setUp(BlockCheckFilterTest.java:80)&#10;  6. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.shouldExtractIPFromXForwardedFor(BlockCheckFilterTest.java:177)&#10;  7. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.shouldExtractIPFromXForwardedFor(BlockCheckFilterTest.java:183)&#10;Please remove unnecessary stubbings or use 'lenient' strictness. More info: javadoc for UnnecessaryStubbingException class." type="org.mockito.exceptions.misusing.UnnecessaryStubbingException">org.mockito.exceptions.misusing.UnnecessaryStubbingException: 
Unnecessary stubbings detected.
Clean &amp; maintainable test code requires zero unnecessary code.
Following stubbings are unnecessary (click to navigate to relevant line of code):
  1. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.setUp(BlockCheckFilterTest.java:73)
  2. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.setUp(BlockCheckFilterTest.java:75)
  3. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.setUp(BlockCheckFilterTest.java:77)
  4. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.setUp(BlockCheckFilterTest.java:79)
  5. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.setUp(BlockCheckFilterTest.java:80)
  6. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.shouldExtractIPFromXForwardedFor(BlockCheckFilterTest.java:177)
  7. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.shouldExtractIPFromXForwardedFor(BlockCheckFilterTest.java:183)
Please remove unnecessary stubbings or use 'lenient' strictness. More info: javadoc for UnnecessaryStubbingException class.
	at app//org.mockito.junit.jupiter.MockitoExtension.afterEach(MockitoExtension.java:197)
	at java.base@17.0.13/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base@17.0.13/java.util.ArrayList.forEach(ArrayList.java:1511)
</failure>
  </testcase>
  <testcase name="shouldBlockRequestWhenUserIsBlocked()" classname="org.example.APIGatewaySvc.filter.BlockCheckFilterTest" time="0.018">
    <failure message="java.lang.AssertionError: expectation &quot;expectComplete&quot; failed (expected: onComplete(); actual: onError(java.lang.NullPointerException: The mapper returned a null Mono))" type="java.lang.AssertionError">java.lang.AssertionError: expectation &quot;expectComplete&quot; failed (expected: onComplete(); actual: onError(java.lang.NullPointerException: The mapper returned a null Mono))
	at reactor.test.MessageFormatter.assertionError(MessageFormatter.java:115)
	at reactor.test.MessageFormatter.failPrefix(MessageFormatter.java:104)
	at reactor.test.MessageFormatter.fail(MessageFormatter.java:73)
	at reactor.test.MessageFormatter.failOptional(MessageFormatter.java:88)
	at reactor.test.DefaultStepVerifierBuilder.lambda$expectComplete$4(DefaultStepVerifierBuilder.java:344)
	at reactor.test.DefaultStepVerifierBuilder$SignalEvent.test(DefaultStepVerifierBuilder.java:2289)
	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.onSignal(DefaultStepVerifierBuilder.java:1529)
	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.onExpectation(DefaultStepVerifierBuilder.java:1477)
	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.onError(DefaultStepVerifierBuilder.java:1129)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:136)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2571)
	at reactor.core.publisher.MonoZip$ZipInner.onSubscribe(MonoZip.java:470)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoZip$ZipCoordinator.request(MonoZip.java:220)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:129)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2573)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.onSubscribe(DefaultStepVerifierBuilder.java:1161)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2051)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.toVerifierAndSubscribe(DefaultStepVerifierBuilder.java:891)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:831)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:823)
	at reactor.test.DefaultStepVerifierBuilder.verifyComplete(DefaultStepVerifierBuilder.java:690)
	at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.shouldBlockRequestWhenUserIsBlocked(BlockCheckFilterTest.java:144)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	Suppressed: java.lang.NullPointerException: The mapper returned a null Mono
		at java.base/java.util.Objects.requireNonNull(Objects.java:235)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		... 43 more
</failure>
  </testcase>
  <testcase name="shouldHaveHighestPrecedence()" classname="org.example.APIGatewaySvc.filter.BlockCheckFilterTest" time="0.01">
    <failure message="org.mockito.exceptions.misusing.UnnecessaryStubbingException: &#10;Unnecessary stubbings detected.&#10;Clean &amp; maintainable test code requires zero unnecessary code.&#10;Following stubbings are unnecessary (click to navigate to relevant line of code):&#10;  1. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.setUp(BlockCheckFilterTest.java:73)&#10;  2. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.setUp(BlockCheckFilterTest.java:74)&#10;  3. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.setUp(BlockCheckFilterTest.java:75)&#10;  4. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.setUp(BlockCheckFilterTest.java:76)&#10;  5. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.setUp(BlockCheckFilterTest.java:77)&#10;  6. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.setUp(BlockCheckFilterTest.java:79)&#10;  7. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.setUp(BlockCheckFilterTest.java:80)&#10;Please remove unnecessary stubbings or use 'lenient' strictness. More info: javadoc for UnnecessaryStubbingException class." type="org.mockito.exceptions.misusing.UnnecessaryStubbingException">org.mockito.exceptions.misusing.UnnecessaryStubbingException: 
Unnecessary stubbings detected.
Clean &amp; maintainable test code requires zero unnecessary code.
Following stubbings are unnecessary (click to navigate to relevant line of code):
  1. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.setUp(BlockCheckFilterTest.java:73)
  2. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.setUp(BlockCheckFilterTest.java:74)
  3. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.setUp(BlockCheckFilterTest.java:75)
  4. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.setUp(BlockCheckFilterTest.java:76)
  5. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.setUp(BlockCheckFilterTest.java:77)
  6. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.setUp(BlockCheckFilterTest.java:79)
  7. -&gt; at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.setUp(BlockCheckFilterTest.java:80)
Please remove unnecessary stubbings or use 'lenient' strictness. More info: javadoc for UnnecessaryStubbingException class.
	at app//org.mockito.junit.jupiter.MockitoExtension.afterEach(MockitoExtension.java:197)
	at java.base@17.0.13/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base@17.0.13/java.util.ArrayList.forEach(ArrayList.java:1511)
</failure>
  </testcase>
  <testcase name="shouldBlockRequestWhenIPIsBlocked()" classname="org.example.APIGatewaySvc.filter.BlockCheckFilterTest" time="0.017">
    <failure message="java.lang.AssertionError: expectation &quot;expectComplete&quot; failed (expected: onComplete(); actual: onError(java.lang.NullPointerException: Cannot invoke &quot;org.springframework.http.HttpHeaders.add(String, String)&quot; because the return value of &quot;org.springframework.http.server.reactive.ServerHttpResponse.getHeaders()&quot; is null))" type="java.lang.AssertionError">java.lang.AssertionError: expectation &quot;expectComplete&quot; failed (expected: onComplete(); actual: onError(java.lang.NullPointerException: Cannot invoke &quot;org.springframework.http.HttpHeaders.add(String, String)&quot; because the return value of &quot;org.springframework.http.server.reactive.ServerHttpResponse.getHeaders()&quot; is null))
	at reactor.test.MessageFormatter.assertionError(MessageFormatter.java:115)
	at reactor.test.MessageFormatter.failPrefix(MessageFormatter.java:104)
	at reactor.test.MessageFormatter.fail(MessageFormatter.java:73)
	at reactor.test.MessageFormatter.failOptional(MessageFormatter.java:88)
	at reactor.test.DefaultStepVerifierBuilder.lambda$expectComplete$4(DefaultStepVerifierBuilder.java:344)
	at reactor.test.DefaultStepVerifierBuilder$SignalEvent.test(DefaultStepVerifierBuilder.java:2289)
	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.onSignal(DefaultStepVerifierBuilder.java:1529)
	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.onExpectation(DefaultStepVerifierBuilder.java:1477)
	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.onError(DefaultStepVerifierBuilder.java:1129)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:136)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2571)
	at reactor.core.publisher.MonoZip$ZipInner.onSubscribe(MonoZip.java:470)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoZip$ZipCoordinator.request(MonoZip.java:220)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:129)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2573)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.onSubscribe(DefaultStepVerifierBuilder.java:1161)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2051)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.toVerifierAndSubscribe(DefaultStepVerifierBuilder.java:891)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:831)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:823)
	at reactor.test.DefaultStepVerifierBuilder.verifyComplete(DefaultStepVerifierBuilder.java:690)
	at org.example.APIGatewaySvc.filter.BlockCheckFilterTest.shouldBlockRequestWhenIPIsBlocked(BlockCheckFilterTest.java:119)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	Suppressed: java.lang.NullPointerException: Cannot invoke &quot;org.springframework.http.HttpHeaders.add(String, String)&quot; because the return value of &quot;org.springframework.http.server.reactive.ServerHttpResponse.getHeaders()&quot; is null
		at org.example.APIGatewaySvc.filter.BlockCheckFilter.createBlockedResponse(BlockCheckFilter.java:157)
		at org.example.APIGatewaySvc.filter.BlockCheckFilter.lambda$filter$1(BlockCheckFilter.java:88)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		... 43 more
</failure>
  </testcase>
  <system-out><![CDATA[]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
