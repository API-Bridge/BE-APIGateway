spring:
  application:
    name: api-gateway
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:}
  
  main:
    allow-circular-references: true
  
  # Kafka 설정
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      client-id: ${spring.application.name}-logging-producer
      acks: 1
      retries: 3
      batch-size: 16384
      linger-ms: 5
      buffer-memory: 33554432
      compression-type: snappy
      enable-idempotence: true
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    template:
      default-topic: logs.gateway

  cloud:
    gateway:
      default-filters:
        - name: Retry
          args:
            retries: 3
            statuses: BAD_GATEWAY,SERVICE_UNAVAILABLE,GATEWAY_TIMEOUT
            backoff:
              first-backoff: 50ms
              max-backoff: 500ms
              factor: 2
        - AddRequestHeader=X-Gateway, api-gateway
        - RemoveRequestHeader=Cookie
        - name: StandardResponseFilter
        - name: TokenRelay
      routes:
        - id: user-service
          uri: http://localhost:8093
          predicates:
            - Path=/gateway/users/**
          filters:
            - StripPrefix=1
            - RewritePath=/gateway/users/(?<segment>.*), /mock/users/$\{segment}
            - name: RequestRateLimiter
              args:
                rate-limiter: "#{@userServiceRateLimiter}"
                key-resolver: "#{@userKeyResolver}"
            - name: CircuitBreaker
              args:
                name: userSvcCb
                fallback-uri: forward:/fallback/user-service
        # ... (다른 라우트 설정 생략)
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOriginPatterns: "*"
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS
            allowedHeaders: "*"
            allowCredentials: true
            maxAge: 3600

  security:
    oauth2:
      client:
        registration:
          auth0:
            client-id: ${AUTH0_CLIENT_ID:}
            client-secret: ${AUTH0_CLIENT_SECRET:}
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope:
              - openid
              - profile
              - email
        provider:
          auth0:
            authorization-uri: https://api-bridge.us.auth0.com/authorize?audience=https://api.api-bridge.com
            issuer-uri: ${AUTH0_ISSUER_URI:https://api-bridge.us.auth0.com/}
            user-name-attribute: sub
      resourceserver:
        jwt:
          issuer-uri: ${AUTH0_ISSUER_URI:https://api-bridge.us.auth0.com/}
          audience: ${AUTH0_AUDIENCE:https://api.api-bridge.com}

  data:
    redis:
      host: ${SPRING_REDIS_HOST:localhost}
      port: ${SPRING_REDIS_PORT:6379}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0


# Auth0 설정
auth0:
  issuerUri: ${AUTH0_ISSUER_URI:https://api-bridge.us.auth0.com/}
  audience: ${AUTH0_AUDIENCE:https://api.api-bridge.com}
  client-id: ${AUTH0_CLIENT_ID:}

# Gateway 로깅 설정
gateway:
  logging:
    enabled: ${GATEWAY_LOGGING_ENABLED:true}
    kafka:
      topic: ${GATEWAY_LOG_TOPIC:logs.gateway}
    mask-sensitive-data: ${GATEWAY_MASK_SENSITIVE_DATA:true}

## 마이크로서비스 URI 설정
#services:
#  user-service:
#    uri: ${USER_SERVICE_URI:http://user-service:8081}
#  api-management-service:
#    uri: ${APIMGMT_SERVICE_URI:http://api-management-service:8082}
#  custom-api-management-service:
#    uri: ${CUSTOMAPI_SERVICE_URI:http://custom-api-management-service:8083}
#  ai-feature-service:
#    uri: ${AIFEATURE_SERVICE_URI:http://ai-feature-service:8084}
#  system-management-service:
#    uri: ${SYSMGMT_SERVICE_URI:http://system-management-service:8085}

# Rate Limiting 설정
rate-limit:
  default:
    replenish-rate: ${RATE_LIMIT_REPLENISH_RATE:10}      # 초당 토큰 보충 개수
    burst-capacity: ${RATE_LIMIT_BURST_CAPACITY:20}      # 버스트 허용 토큰 수
    requested-tokens: ${RATE_LIMIT_REQUESTED_TOKENS:1}   # 요청당 소비 토큰 수
  user-service:
    replenish-rate: 20   # 사용자 서비스는 더 관대하게
    burst-capacity: 40
  ai-service:
    replenish-rate: 5    # AI 서비스는 더 엄격하게
    burst-capacity: 10
    requested-tokens: 2
  management:
    replenish-rate: 15   # 관리 서비스는 중간 정도
    burst-capacity: 30

resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowSize: 20
        minimumNumberOfCalls: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 10s
        slowCallDurationThreshold: 3s
        slowCallRateThreshold: 50
        permittedNumberOfCallsInHalfOpenState: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true
        recordExceptions:
          - java.net.ConnectException
          - java.net.SocketTimeoutException
          - java.io.IOException
          - org.springframework.web.reactive.function.client.WebClientRequestException
          - org.springframework.web.reactive.function.client.WebClientResponseException.ServiceUnavailable
        ignoreExceptions:
          - org.springframework.web.reactive.function.client.WebClientResponseException.BadRequest
          - org.springframework.web.reactive.function.client.WebClientResponseException.NotFound
    instances:
      userSvcCb:
        baseConfig: default
        registerHealthIndicator: true
      apiMgmtSvcCb:
        baseConfig: default
        registerHealthIndicator: true
      customApiMgmtSvcCb:
        baseConfig: default
        registerHealthIndicator: true
      aiFeatureSvcCb:
        baseConfig: default
        registerHealthIndicator: true
        slowCallDurationThreshold: 5s
        slowCallRateThreshold: 30
      systemMgmtSvcCb:
        baseConfig: default
        registerHealthIndicator: true
  metrics:
    enabled: true
    legacy:
      enabled: false
  prometheus:
    enabled: true

# 로깅 설정
logging:
  level:
    root: INFO
    org.example.APIGatewaySvc: DEBUG
    org.springframework.cloud.gateway: DEBUG
    org.springframework.security: DEBUG
    org.springframework.security.oauth2.jwt: DEBUG
    com.nimbusds: DEBUG
    reactor.netty: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{requestId:-}] %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{requestId:-}] %logger{36} - %msg%n"

# Actuator 설정
management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,metrics,gateway,circuitbreakers
      base-path: /actuator
  endpoint:
    health:
      show-details: when_authorized
      show-components: always
    gateway:
      access: read_only
    circuitbreakers:
      enabled: true
  prometheus:
    metrics:
      export:
        enabled: true
  metrics:
    tags:
      service: api-gateway
      version: ${BUILD_VERSION:dev}
      environment: ${SPRING_PROFILES_ACTIVE:local}
    export:
      prometheus:
        descriptions: true
        histogram-flavor: prometheus
  tracing:
    sampling:
      probability: 1.0
  health:
    circuitbreakers:
      enabled: true
    ratelimiters:
      enabled: true

# 서버 설정
server:
  port: ${SERVER_PORT:8080}
  netty:
    connection-timeout: 2s
    idle-timeout: 15s

# Eureka 비활성화 (JWT 테스트 목적)
eureka:
  client:
    enabled: false

springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method
  show-actuator: true
